" Source whatever system settings there are
if filereadable("/etc/vimrc")
    source /etc/vimrc
endif

" Pathogen
if v:version < 800
    execute pathogen#infect()
endif

" Remap leader keys
let mapleader = "\<Space>"

" Show line numbers
" Use relative numbers in focused window but switch to absolute otherwise
set number
augroup numberToggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

" Appearance
colorscheme distinguished
let g:preferredWidth = 80
set nowrap
set t_Co=256
let &colorcolumn = g:preferredWidth + 1
if has("gui_running")
    " Set font in gvim
    set guifont=DejaVu\ Sans\ Mono\ 11

    " Remove menubar and toolbar
    set guioptions-=T
    set guioptions-=m
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

    " Window geometry
    "set lines=108
    "set lines=93
else
    " Mouse support in terminal
    set mouse=a
endif

" Enable status line all the time
set laststatus=2


" Handle indentation
set expandtab
filetype indent on
set shiftwidth=4
set tabstop=4
set softtabstop=4

set cinkeys-=0#
set indentkeys-=0#

" Wrap text at 80 characters using whitespace as delimiter
let &tw = g:preferredWidth
set formatoptions+=t

" Disable backup and swp files
set nobackup
set nowritebackup
set noswapfile

" Set longer history and undo
set history=10000
set undolevels=10000

" Make man pages function properly in gvim
runtime ftplugin/man.vim
if has("gui_running")
   nnoremap K :<C-U>exe "Man" v:count "<C-R><C-W>"<CR>
endif

let g:suppressResize = 0
let g:suppressWindowResize = 0
"command! -nargs=0 OpenFile execute ':call EclimOpen()"

" Define the Silent command
" The Silent command allows execution of a command silently and returns to vim
command! -nargs=1 Silent execute ':silent !' . <q-args> | execute ':redraw!'

" Movement functions to allow tmux and i3 integration
function! MoveLeft()
    let originalWindow = winnr()
    wincmd h
    let newWindow = winnr()
    if originalWindow == newWindow
        if has("gui_running")
            Silent i3-msg focus left
        elseif exists('$TMUX')
            Silent tmux select-pane -L
        endif
    endif
endfunction

function! MoveDown()
    let originalWindow = winnr()
    wincmd j
    let newWindow = winnr()
    if originalWindow == newWindow
        if has("gui_running")
            Silent i3-msg focus down
        elseif exists('$TMUX')
            Silent tmux select-pane -D
        endif
    endif
endfunction

function! MoveUp()
    let originalWindow = winnr()
    wincmd k
    let newWindow = winnr()
    if originalWindow == newWindow
        if has("gui_running")
            Silent i3-msg focus up
        elseif exists('$TMUX')
            Silent tmux select-pane -U
        endif
    endif
endfunction

function! MoveRight()
    let originalWindow = winnr()
    wincmd l
    let newWindow = winnr()
    if originalWindow == newWindow
        if has("gui_running")
            Silent i3-msg focus right
        else
            Silent tmux select-pane -R
        endif
    endif
endfunction

function! GoToFurthestLeftWindow()
    let newWindow = -1
    let lastWindow = winnr()
    while lastWindow != newWindow
        let lastWindow = winnr()
        wincmd h
        let newWindow = winnr()
    endwhile
endfunction

function! CountVerticalSplits()
    let oldEventIgnore = &eventignore
    try
        set eventignore=all
        let currentWindow = winnr()
        call GoToFurthestLeftWindow()
        let newWindow = -1
        let lastWindow = winnr()
        let windowCount = 0
        while lastWindow != newWindow
            let windowCount += 1
            let lastWindow = winnr()
            wincmd l
            let newWindow = winnr()
        endwhile
        execute currentWindow . 'wincmd w'
        let &eventignore = oldEventIgnore
        return windowCount
    catch
        let &eventignore = oldEventIgnore
        return -1
    endtry
endfunction

" Function to count the number of splits I have open
function! CountSplits()
    let currentWindow = winnr()
    let windowCount = 0
    windo let windowCount += 1
    execute currentWindow . 'wincmd w'
    return windowCount
endfunction

" Function to calculate the ideal width of the screen based on the number of
" splits
" Note: this assumes that every split is vertical
function! CalculateIdealWindowSize()
    let oldEventIgnore = &eventignore
    let currentWindow = winnr()
    try
        let windowSize = 0
        call GoToFurthestLeftWindow()
        let newWindow = -1
        let lastWindow = winnr()
        while lastWindow != newWindow
            let windowSize += g:preferredWidth + 1 + &numberwidth
            let lastWindow = winnr()
            wincmd l
            let newWindow = winnr()
        endwhile
        let windowSize -= 1

        execute currentWindow . 'wincmd w'
        let &eventignore = oldEventIgnore
        return windowSize
    catch
       let &eventignore = oldEventIgnore
       execute currentWindow . 'wincmd w'
       return g:preferredWidth + &numberwidth
    endtry
endfunction

" Resize window based on the max size for the window and the ideal size based
" on splits, i.e. it can be smaller than the max size if fewer splites are
" open but it will never be larger than the max size
function! ResizeWindow()
    if g:suppressWindowResize == 0
        let currentWindow = winnr()
        let maxColumns = 300
        let idealColumns = CalculateIdealWindowSize()
        let newColumns = float2nr(min([maxColumns, idealColumns]))
        if has("gui_running")
            let &columns = newColumns
            "set lines=108
            "set lines=93
        elseif exists('$TMUX')
            let deltaColumns = newColumns - str2float(&columns)
            let direction = "-L "
            if deltaColumns < 0
                let cmd = "Silent tmux resize-pane " . direction . string(float2nr(deltaColumns))
                execute cmd
            endif
        endif
        execute currentWindow . 'wincmd w'
    endif
endfunction

function! ResizeSplit()
    call ResizeWindow()
    let nColumns = g:preferredWidth + &numberwidth
    if nColumns != str2float(&columns)
        execute "vertical resize " . float2nr(nColumns)
    endif
endfunction

function! ResizeSplits()
    if g:suppressResize != 1
        let oldEventIgnore = &eventignore
        let currentWindow = winnr()
        try
            call GoToFurthestLeftWindow()
            let newWindow = -1
            let lastWindow = winnr()
            while lastWindow != newWindow
                call ResizeSplit()
                let lastWindow = winnr()
                wincmd l
                let newWindow = winnr()
            endwhile
        catch
        endtry

        execute currentWindow . 'wincmd w'
        redraw!
        let &eventignore = oldEventIgnore
    endif
endfunction

function! EclimOpen()
    let g:suppressResize = 1
    try
        LocateFile
        let g:suppressResize = 0
    catch
        let g:suppressResize = 0
    endtry
endfunction

if has("gui_running")
    "call ResizeWindow()
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Generic shortcuts to make vim behave more standard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set up copy, cut, and paste with ctrl-c, ctrl-x, ctrl-v respectively
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>

" Change tabs with Super+Tab
map <M-Tab> gt

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Seach Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight searches
set hlsearch

" Start highlighting next match while typing
set incsearch

" Set case-insensitivity
set ignorecase
set smartcase

"augroup dynamic_smartcase
"  autocmd!
"  autocmd CmdLineEnter : set nosmartcase
"  autocmd CmdLineEnter : set ignorecase
"  autocmd CmdLineLeave : set smartcase
"augroup END

" Center Screen on search next/prev
noremap n nzz
noremap N Nzz

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keyboard bindings for convenience
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Page up and page down
noremap <Leader>j <C-f>
noremap <Leader>k <C-b>

" Switch windows
" If nothing is intercepting these, then vim should just handle them
" The first four don't work in the terminal, but do in gvim
" The problem is that the terminal does not send different codes for C-H and
" C-S-H.
" Note: The <C-S-H> versions must be first, or else in the terminal, C-H will
" move the window, not switch the window.
"oremap <C-S-H> <C-w>H
"oremap <C-S-J> <C-w>J
"oremap <C-S-K> <C-w>K
"oremap <C-S-L> <C-w>L
"oremap <C-H> <C-w>h
"oremap <C-J> <C-w>j
"oremap <C-K> <C-w>k
"noremap <C-L> <C-w>l

" These mappings allow vim to work nicely with TMUX and i3
noremap <C-h> :call MoveLeft()<CR>
noremap <C-j> :call MoveDown()<CR>
noremap <C-k> :call MoveUp()<CR>
noremap <C-l> :call MoveRight()<CR>
noremap <T-F1> :call MoveLeft()<CR>
noremap <T-F2> :call MoveDown()<CR>
noremap <T-F3> :call MoveUp()<CR>
noremap <T-F4> :call MoveRight()<CR>
noremap <T-C-F1> :call MoveLeft()<CR>
noremap <T-C-F2> :call MoveDown()<CR>
noremap <T-C-F3> :call MoveUp()<CR>
noremap <T-C-F4> :call MoveRight()<CR>
"inoremap <C-h> <C-\><C-O>:call MoveLeft()<CR>
"inoremap <C-j> <C-\><C-O>:call MoveDown()<CR>
"inoremap <C-k> <C-\><C-O>:call MoveUp()<CR>
"inoremap <C-l> <C-\><C-O>:call MoveRight()<CR>
noremap <C-F1> :call MoveLeft()<CR>
noremap <C-F2> :call MoveDown()<CR>
noremap <C-F3> :call MoveUp()<CR>
noremap <C-F4> :call MoveRight()<CR>
inoremap <C-F1> <C-\><C-O>:call MoveLeft()<CR>
inoremap <C-F2> <C-\><C-O>:call MoveDown()<CR>
inoremap <C-F3> <C-\><C-O>:call MoveUp()<CR>
inoremap <C-F4> <C-\><C-O>:call MoveRight()<CR>

" Move windows
" TODO: figure out how to make these work with PuTTY
noremap <C-Left> <C-w>H
noremap <C-Down> <C-w>J
noremap <C-Up> <C-w>K
noremap <C-Right> <C-w>L
noremap <C-Tab> <C-w>R
noremap <C-t> <C-w>T

" Use F11 as escape (useful because I can bind CapsLock to F11 for various
" functions via xmodmap)
nnoremap <special> <F11> <Esc>
vnoremap <special> <F11> <Esc>gV
onoremap <special> <F11> <Esc>
inoremap <special> <F11> <Esc>
cnoremap <special> <F11> <C-[>

" Use F4 to repeat the q buffer
noremap <F4> @q

" Keys for diff resolution
nnoremap <F6> &diff ? ':diffg LO<CR>' : ''
nnoremap <F7> &diff ? ':diffg RE<CR>' : ''
nnoremap <F8> &diff ? ']czz<CR>' : ''
nnoremap <F8> &diff ? '[czz<CR>' : ''
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Function to close a buffer but not the current window
function! CloseBufferKeepWindow()
    let bufferToClose = bufnr('%')
    edit #
    exec 'bdelete' . bufferToClose
endfunction

augroup vimrc_autocmds
    autocmd!

    autocmd bufwritepost .vimrc source %
    autocmd bufwritepost ~/.vimrc source %
    "TODO extend this to all loaded vim/gvim windows
    "     maybe via clientserver?
    "     maybe via datestamp on file?

    " Unfold everything on opening
    autocmd BufWinEnter * normal zR

    " Unfold everything before closing to prevent crashing in gvim
    autocmd BufLeave * normal zR
augroup END

"augroup resize_autocmds
"    au BufRead * call ResizeSplits()
"augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Handle filetypes correctly
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrc_filetypes
    autocmd!
    autocmd BufNewFile,BufRead *.cc set filetype=cpp
    autocmd BufNewFile,BufRead *.kml set filetype=xml
augroup END
filetype plugin indent on
filetype plugin on
syntax on

set nocompatible

" Handle utf
if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    setglobal fileencoding=utf-8
    set fileencodings=ucs-bom,utf-8,latin1
endif

" Arduino stuff
let g:arduino_dir = '/usr/share/arduino'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Look for tags files with the name tags or .tags in current directory or in the
" parent tree
set tags=./tags;,tags;,./.tags,.tags;

" Make sure cscope stuff is off to avoid conflicting with ctags
set nocscopetag
set nocscopeverbose

" Define a command to update the ctags file
command! CtagsUpdate Silent runCtags.sh

" The default is Ctrl-] but I find that annoying.  Leader-f for find is better
noremap <Leader>f :tag <C-R>=expand("<cword>")<CR><CR>
noremap <Leader>F :ts <C-R>=expand("<cword>")<CR><CR>

" Use F3 to update ctags
"noremap <F3> :CtagsUpdate<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" Identify higlight group at cursor
function! HiName()
    let s = synID(line('.'), col('.'), 1)
    echo synIDattr(s, 'name') . ' -> ' . synIDattr(synIDtrans(s), 'name')
endfunction

"au BufRead * let &numberwidth = float2nr(log10(line("$"))) + 2

" Handle keypad escape values
"inoremap <Esc>0q 1
"inoremap <Esc>0r 2
"inoremap <Esc>0s 3
"inoremap <Esc>0t 4
"inoremap <Esc>0u 5
"inoremap <Esc>0v 6
"inoremap <Esc>0w 7
"inoremap <Esc>0x 8
"inoremap <Esc>0y 9
"inoremap <Esc>0p 0
"inoremap <Esc>0n .
"inoremap <Esc>0Q /
"inoremap <Esc>0R *
"inoremap <Esc>0l +
"inoremap <Esc>0S -
"inoremap <Esc>0M <Enter>

